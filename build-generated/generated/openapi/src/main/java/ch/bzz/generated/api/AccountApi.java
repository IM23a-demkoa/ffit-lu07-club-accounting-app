/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ch.bzz.generated.api;

import ch.bzz.generated.model.Account;
import ch.bzz.generated.model.UpdateAccountsRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Account", description = "the Account API")
public interface AccountApi {

    /**
     * GET /accounts : Get all accounts of this accounting project
     *
     * @return List of accounts (status code 200)
     */
    @Operation(
        operationId = "getAccounts",
        summary = "Get all accounts of this accounting project",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of accounts", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Account>> getAccounts(
        
    );


    /**
     * PUT /accounts : Save adjusted accounts
     *
     * @param updateAccountsRequest  (required)
     * @return Changes saved successfully (status code 200)
     */
    @Operation(
        operationId = "updateAccounts",
        summary = "Save adjusted accounts",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Changes saved successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/accounts",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateAccounts(
        @Parameter(name = "UpdateAccountsRequest", description = "", required = true) @Valid @RequestBody UpdateAccountsRequest updateAccountsRequest
    );

}
